
<%= form_with url: dedicace_de_fin_post_path(@video_dedicace), method: :patch, multipart: true, local: true do |f| %>
  <div>
    <h1 class="video-h1"><%= t('videos.dedicace_de_fin.title') %></h1>
    <div class="flex flex-row justify-center w-full">
      <%= image_tag 'left-no-star.png', class: 'image-sides left-image' %>
      <div class="content w-full flex flex-col justify-center items-center">
        <div class="text-with-image-block flex justify-center items-center mb-[72px] w-full p-text-16">
          <%= t('videos.dedicace_de_fin.film_yourself') %>
          <%= image_tag 'icons/three-stars.png', class: 'image-from-image-text-block' %>
        </div>
        <div class="flex flex-col justify-start items-center">
          <div class="dedicace-de-fin-frame mt-6 flex flex-col justify-start items-start">
            <div class="flex justify-start items-center">
              <div class="mr-2 p-text-16"><%= t('videos.dedicace_de_fin.your_media') %></div>
              <div class="flex justify-start items-center p-text-16">
                <%= image_tag 'icons/mingcute_time-line.png', alt: 'Time Icon', class: 'inline-block ml-15 mr-2', style: 'height: 24px; width: 24px;' %>
                <span id="recordingDuration">
                  <%# <% if @video_dedicace.present? && @video_dedicace.creator_end_dedication_video.attached? %> %>
                    <%# <%= @video_dedicace.creator_end_dedication_video_duration %> %>
                  <%# else %>
                    <%# Duration: N/A %>
                  <%# <% end %> %>
                </span>
              </div>
            </div>

            <div class="flex justify-start items-center mt-8">
              <div class="mr-2 font-bold p-text-bold-16"><%= t('videos.dedicace_de_fin.theme') %></div>
              <div class="flex justify-start items-center p-text-16">
                <%= @dedicace.name %>
              </div>
            </div>
            
            <div class="w-full flex justify-center items-center mt-8">
              <div class="video-slots-container relative">
                <!-- Background image container -->
                <div id="backgroundContainer" class="absolute inset-0">
                  <%= image_tag 'dedicace-carpool-background.jpg', class: 'w-full h-full object-cover', id: 'carBackground' %>
                </div>

                <!-- Video slots container -->
                <div class="video-slots absolute inset-0">
                  <% (1..3).each do |slot_number| %>
                    <%- video_dedicace_slot = @video_dedicace.video_dedicace_slots.find do |v_d|
                        v_d.slot == slot_number
                      end -%>

                    <div class="video-slot <%= slot_number == 2 ? 'center-slot' : 'side-slot' %>" data-slot-number="<%= slot_number %>">
                      <% if video_dedicace_slot.present? && video_dedicace_slot.video.attached? %>
                        <img src="<%= url_for(video_dedicace_slot.preview) %>" class="video-preview" alt="Video Preview">
                        <div class="re-record-overlay">
                          <span>Re-record?</span>
                        </div>
                      <% else %>
                        <div class="plus-button">
                          <% if slot_number == 2 %>
                            <svg width="180" height="280" viewBox="0 0 180 280" xmlns="http://www.w3.org/2000/svg" class="center-svg">
                              <ellipse cx="90" cy="70" rx="40" ry="50" fill="#777" />
                              <path d="M 60,120 L 75,105 H 105 L 120,120 V 210 H 60 Z" fill="#777" />
                              <circle cx="90" cy="70" r="14" fill="#ccc" stroke="#000" stroke-width="1" />
                              <line x1="84" y1="70" x2="96" y2="70" stroke="#000" stroke-width="2" />
                              <line x1="90" y1="64" x2="90" y2="76" stroke="#000" stroke-width="2" />
                            </svg>
                          <% else %>
                            <svg width="200" height="240" viewBox="0 0 200 240" xmlns="http://www.w3.org/2000/svg" class="side-svg">
                              <ellipse cx="100" cy="60" rx="45" ry="55" fill="#777"></ellipse>
                              <path d="M 25,120 L 50,100 H 150 L 175,120 V 240 H 25 Z" fill="#777"></path>
                              <circle cx="100" cy="60" r="12" fill="#999"></circle>
                              <line x1="94" y1="60" x2="106" y2="60" stroke="#fff" stroke-width="2"></line>
                              <line x1="100" y1="54" x2="100" y2="66" stroke="#fff" stroke-width="2"></line>
                            </svg>
                          <% end %>
                        </div>
                      <% end %>
                    </div>
                  <% end %>
                </div>
              </div>
            </div>

            <!-- Recording Modal -->
            <div id="recordingModal" class="modal" style="display: none;">
              <div class="modal-content">
                <div class="video-recording-block flex justify-center items-center relative">
                  <div class="video-recording__preview">
                    <%= image_tag 'dedicace-camera-preview.png', class: 'w-full h-full object-cover' %>
                  </div>
                  <video id="videoPreview" class="absolute inset-0 w-full h-full object-cover" play playsinline muted></video>
                  
                  <div class="spinner" role="status">
                    <div class="spinner-animation">
                      <span class="loader"></span>
                    </div>
                    <p>Processing video...</p>
                  </div>
                  
                  <div id="recordingTimer" class="absolute top-4 right-4 bg-red-500 text-white px-3 py-1 rounded" style="display: none;">
                    30s
                  </div>
                </div>

                <div class="modal-buttons">
                  <button type="button" id="startRecording" class="record-transparent">
                    <%= image_tag "icons/fluent_record-24-regular.png", alt: "Start Recording", class: "inline-block", style: "height: 16px; width: 16px;" %>
                    Commencer l'enregistrement vidéo
                  </button>

                  <button type="button" id="stopRecording" class="record-transparent" style="display: none;">
                    <%= image_tag "icons/fluent_record-24-regular.png", alt: "Stop Recording", class: "inline-block", style: "height: 16px; width: 16px;" %>
                    Arrêter l'enregistrement vidéo
                  </button>

                  <button type="button" id="confirmRecording" class="black-link" style="display: none;">
                    OK
                  </button>

                  <button type="button" id="cancelRecording" class="black-link">
                    Annuler
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="video-steps w-full">
          <%= render "videos/shared/back_button" %>
          <div>
            <%= link_to t('videos.dedicace_de_fin.continue_later'), skip_dedicace_de_fin_path, class: "p-text-16-bold text-decoration-underline mr-4" %>
            <%= f.submit t('next_step'), class: "black-link" %>
          </div>
        </div>
      </div>
      <%= image_tag 'right-with-star.png', class: 'image-sides right-image' %>
    </div>
  </div>
<% end %>

<style>
  .video-slots-container {
    aspect-ratio: 16/9;
    background: #f5f5f5;
    border-radius: 15px;
    overflow: hidden;
    position: relative;
    width: 100%;
    max-width: 1000px;
  }

  .video-recording__preview {
    width: 100%;
    height: 100%;
    border-radius: 15px;
    position: relative;
    background-color: #C9E1FF;
    z-index: 1001;
  }

  .video-recording__preview img {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 240px;
    height: auto;
    transform: translate(-50%, -50%);
  }

  .video-slots {
    height: 100%;
  }

  .video-slot {
    width: 360px;
    position: absolute;
    bottom: 0;
    cursor: pointer;
    overflow: hidden;
  }

  .side-slot:first-of-type {
    left: 6%;
  }

  .side-slot:last-of-type {
    right: 6%;
  }

  .center-slot {
    left: 50%;
    transform: translateX(-50%) scale(1.3);
    width: 170px;
    top: 13%;
    height: auto;
    bottom: 210px;
  }

  .center-slot img {
    width: unset;
    height: auto;
  }

  .video-slot:hover .re-record-overlay {
    opacity: 1;
  }

  .re-record-overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .plus-button {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: flex-end;
  }

  .plus-button .side-svg {
    width: 100%;
    height: auto;
  }

  .plus-button .center-svg {
    width: 90%;
    height: auto;
    max-width: 140px;
  }

  .modal {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .modal-content {
    background: white;
    padding: 20px;
    border-radius: 15px;
    width: 90%;
    max-width: 800px;
  }

  .video-recording-block {
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
    aspect-ratio: 9/16;
    background: #f5f5f5;
    border-radius: 8px;
    overflow: hidden;
  }

  .modal-buttons {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 20px;
  }

  .video-preview {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .spinner {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding-top: 55px;
  }

  .spinner .loader {
    width: 48px;
    height: 48px;
    border: 5px solid #FFF;
    border-bottom-color: transparent;
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
  }

  .spinner-animation {
    height: 48px;
    width: 48px;
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
  }

  @keyframes rotation {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
  } 
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  let lastValidSegmentation = null;
  let mediaRecorder;
  let recordedChunks = [];
  let recordingInterval;
  let timeLeft = 30;
  let isRecording = false;
  let currentSlot = null;
  let processedVideo = false;

  const videoPreview = document.getElementById("videoPreview");
  const recordingTimer = document.getElementById("recordingTimer");
  const startButton = document.getElementById("startRecording");
  const stopButton = document.getElementById("stopRecording");
  const confirmButton = document.getElementById("confirmRecording");
  const cancelButton = document.getElementById("cancelRecording");
  const recordingModal = document.getElementById("recordingModal");
  const videoSlots = document.querySelectorAll(".video-slot");
  const loadingSpinner = document.querySelector(".spinner");
  const videoRecordingPreviewBlock = document.querySelector(".video-recording__preview");

  // Open recording modal with proper sizing
  function openRecordingModal(slotNumber) {
    if (videoPreview.srcObject) {
      videoPreview.srcObject.getTracks().forEach(track => track.stop());
    }
    currentSlot = slotNumber;
    recordingModal.style.display = 'flex';
    videoPreview.style.display = 'none';
    videoPreview.controls = false;
    videoPreview.muted = true;
    loadingSpinner.style.display = 'none';
    
    // Reset video and canvas
    
    startButton.style.display = 'block';
    stopButton.style.display = 'none';
    confirmButton.style.display = 'none';
    recordingTimer.style.display = 'none';
  }

  // Close recording modal
  function closeRecordingModal() {
    recordingModal.style.display = 'none';
    videoPreview.srcObject = null;
    videoPreview.src = '';
    videoPreview.currentTime = 0;
    processedVideo = false;
    currentSlot = null;

    if (videoPreview.srcObject) {
      videoPreview.srcObject.getTracks().forEach(track => track.stop());
    }
    currentSlot = null;
  }

  // Start recording with improved settings
  async function startRecording() {
    try {
      isRecording = true;
      recordedChunks = [];
      timeLeft = 30;
      videoRecordingPreviewBlock.style.display = 'none';
      videoPreview.style.display = 'block'; 

      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 720 },
          height: { ideal: 1280 },
          frameRate: { ideal: 30 },
          facingMode: "user",
          aspectRatio: { ideal: 0.5625 }
        },
        audio: true
      });

      videoPreview.srcObject = stream;
      await videoPreview.play();

      const options = {
        mimeType: 'video/webm;codecs=vp8,opus',
        videoBitsPerSecond: 1500000
      };

      mediaRecorder = new MediaRecorder(stream, options);

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          recordedChunks.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(recordedChunks, { type: options.mimeType });
      };

      mediaRecorder.start(1000);

      startButton.style.display = 'none';
      stopButton.style.display = 'block';
      recordingTimer.style.display = 'block';

      recordingInterval = setInterval(() => {
        timeLeft--;
        recordingTimer.textContent = `${timeLeft}s`;
        if (timeLeft <= 0) {
          stopRecording();
        }
      }, 1000);

    } catch (err) {
      console.error('Error in recording process:', err);
      alert('Camera access is required. Please ensure you have granted camera permissions.');
      closeRecordingModal();
    }
  }

  // Stop recording
  function stopRecording() {
    isRecording = false;
    
    if (mediaRecorder && mediaRecorder.state !== 'inactive') {
      mediaRecorder.stop();
    }

    if (recordingInterval) {
      clearInterval(recordingInterval);
    }

    if (videoPreview.srcObject) {
      videoPreview.srcObject.getTracks().forEach(track => track.stop());
    }

    recordingTimer.style.display = 'none';
    stopButton.style.display = 'none';
    confirmButton.style.display = 'block';
    cancelButton.style.display = 'block';

    // Show the last frame in the preview
    const blob = new Blob(recordedChunks, { type: 'video/webm' });
    const videoURL = URL.createObjectURL(blob);
    videoPreview.style.display = 'block';
    videoPreview.pause();
    videoPreview.currentTime = 0;
    videoPreview.srcObject = null;
    videoPreview.controls = true;
    videoPreview.muted = false;
    videoPreview.src = videoURL;

    videoPreview.onloadedmetadata = () => {
      videoPreview.currentTime = 0;
      videoPreview.play();
    };
  }

  // Confirm recording with improved preview handling
  async function confirmRecording() {
    videoPreview.pause();
    if (!recordedChunks.length) return;
    if (processedVideo) {
      closeRecordingModal();
      return;
    }

    const formData = new FormData();
    const blob = new Blob(recordedChunks, { type: 'video/webm' });
    formData.append('video_file', blob, 'recorded_video.webm');
    formData.append('slot_number', currentSlot);
    
    // Add CSRF token
    const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    try {
      // Show loading spinner
      videoPreview.style.display = 'none';
      confirmButton.style.display = 'flex';
      loadingSpinner.style.display = 'flex';

      const url = `/videos/${<%= @video.id %>}/update_video_slot`;
      const response = await fetch(url, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': token
        },
        body: formData,
        credentials: 'same-origin'
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.errors ? data.errors.join(', ') : 'Failed to process video');
      }

      if (data.status === 'processing') {
        const checkSlotStatus = setInterval(async () => {
          const url = `/videos/${<%= @video.id %>}/get_video_slot_status?${new URLSearchParams({
            slot_number: currentSlot
          }).toString()}`
          const checkResponse = await fetch(url, {
            method: 'GET',
            headers: {
              'X-CSRF-Token': token
            },
            credentials: 'same-origin'
          });
          const checkData = await checkResponse.json();

          if (checkData.status === 'error') {
            clearInterval(checkSlotStatus);
            alert('Error processing video: ' + checkData.message);
            loadingSpinner.style.display = 'none';
            return;
          }
          
          if (checkData.status === 'done') {
            clearInterval(checkSlotStatus);
            processedVideo = true;
            const slot = document.querySelector(`.video-slot[data-slot-number="${currentSlot}"]`);
            slot.innerHTML = `
              <img src="${checkData.preview_url}" class="video-preview" alt="Video Preview">
              <div class="re-record-overlay">
                <span>Re-record?</span>
              </div>
            `;
            videoPreview.src = checkData.video_url;
            videoPreview.currentTime = 0;
            loadingSpinner.style.display = 'none';
            videoPreview.style.display = 'block';
            videoPreview.controls = true;
          }
        }, 5000);

      }

      // if (data.success) {
      //   processedVideo = true;
      //   const slot = document.querySelector(`.video-slot[data-slot-number="${currentSlot}"]`);
      //   slot.innerHTML = `
      //     <img src="${data.preview_url}" class="video-preview" alt="Video Preview">
      //     <div class="re-record-overlay">
      //       <span>Re-record?</span>
      //     </div>
      //   `;
      //   // closeRecordingModal();
      //   videoPreview.src = data.video_url;
      //   videoPreview.currentTime = 0;
      //   loadingSpinner.style.display = 'none';
      //   videoPreview.style.display = 'block';
      //   videoPreview.controls = true;
      // } else {
      //   throw new Error(data.errors ? data.errors.join(', ') : 'Failed to process video');
      // }
    } catch (error) {
      console.error('Error saving video:', error);
      loadingSpinner.style.display = 'none';
      alert('Failed to save video: ' + error.message);
    }
  }

  // Close recording modal with cleanup
  function closeRecordingModal() {
    recordingModal.style.display = 'none';
    
    // Clean up video element
    if (videoPreview.srcObject) {
      videoPreview.srcObject.getTracks().forEach(track => track.stop());
    }
    videoPreview.pause();
    timeLeft = 30;
    videoPreview.currentTime = 0;
    videoPreview.srcObject = null;
    videoPreview.src = '';
    videoPreview.muted = true;
    videoRecordingPreviewBlock.style.display = 'block';
    
    currentSlot = null;
    processedVideo = false;
  }

  // Event listeners
  videoSlots.forEach(slot => {
    slot.addEventListener('click', () => {
      const slotNumber = slot.dataset.slotNumber;
      const hasVideo = slot.querySelector('.video-preview');
      
      if (hasVideo) {
        if (confirm('Replace existing video?')) {
          openRecordingModal(slotNumber);
        }
      } else {
        openRecordingModal(slotNumber);
      }
    });
  });

  startButton.addEventListener('click', startRecording);
  stopButton.addEventListener('click', stopRecording);
  confirmButton.addEventListener('click', confirmRecording);
  cancelButton.addEventListener('click', closeRecordingModal);

  // Clean up on page unload
  window.addEventListener('beforeunload', () => {
    if (isRecording) {
      stopRecording();
    }
  });
});
</script>