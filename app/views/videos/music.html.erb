<div>
  <h1 class="video-h1">
    <%= t('videos.music.title') %>
  </h1>
  <div class="w-full flex flex-col justify-center items-center">
    <div class="text-with-image-block-occasion flex justify-center items-center mb-[72px] w-full p-text-16">
      <%= t('videos.music.description') %>
      <%= image_tag 'icons/headphone.png', class: 'image-from-image-text-block' %>
    </div>
  </div>
  <div class="">

    <div class="frame w-50i">
      <div class='w-full'>
        <%= form_with model: @video, url: update_video_music_type_path(id: @video.id), method: :patch, remote: true, html: { id: 'music-type-form', class: 'w-full' } do |f| %>
          <div class='flex justify-between items-center'>
            <div class='flex justify-between items-center'>
              <%= f.radio_button :music_type, 'whole_video', checked: @video.whole_video?, onchange: 'this.form.submit();' %>
              <%= f.label :music_type_whole_video, t('videos.music.full_video'), for: 'video_music_type_whole_video', class: "ml-2 p-text-16" %>
            </div>

            <div class='flex justify-between items-center'>
              <%= f.radio_button :music_type, 'by_chapters', checked: @video.by_chapters?, onchange: 'this.form.submit();' %>
              <%= f.label :music_type_by_chapters, t('videos.music.by_chapters'), for: 'video_music_type_by_chapters', class: "ml-2 p-text-16" %>
            </div>
          </div>
        <% end %>
      </div>
    </div>
    <br>

    <div id="whole-video-form" style="<%= @video.whole_video? ? '' : 'display: none;' %>">
      <%= form_with url: music_post_path, method: :post, html: { data: { turbo: false } } do |f| %>
        <div class="music-frame">
          <div class="video-musics">
            <% @musics.each do |music| %>
              <div class="video-music">
                <div class="music-name p-text-16"><%= music[:name] %></div>
                <div class="music-audio">
                  <%= f.radio_button "music", music[:id], {checked: music[:id] == @video.music&.id}%>
                  <div class="audio-visualizer" data-controller="audio-visualizer" data-audio-src="<%= music[:url] %>" data-waveform="<%= music[:waveform] %>">
                    <div class="play-icon play-button" data-audio-visualizer-target="playPauseButton">
                      <div class="play-button-icon"></div>
                    </div>
                    <canvas class="waveform-canvas" data-audio-visualizer-target="waveformCanvas"></canvas>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        </div>

        <div class="w-full flex justify-center items-center mt-6">
          <div class="w-[1006px] flex-shrink-0 rounded-[20px] border border-[rgba(201,225,255,0.20)] bg-white shadow-[4px_4px_20px_5px_rgba(13,103,131,0.10)] py-[49.5px] px-[116px] mb-[56px]">
            <p class="w-100 mb-[32px] p-text-center-16">
              <%= t('videos.music.describe_music') %>
            </p>
            <%= f.text_area :special_request_music,
                            id: "special_request_music",
                            placeholder: t('videos.music.describe_placeholder'),
                            rows: 3,
                            value: @video.special_request_music,
                            class: "flex w-100i px-[27px] py-[15px] items-start gap-[10px] rounded-[8px] border border-[rgba(32,31,31,0.50)] bg-white text-black font-red-hat-display text-[16px] font-normal leading-[25px]" %>
          </div>
        </div>


        <div class="video-steps">
          <%= render "videos/shared/back_button" %>
          <%= f.submit t('next_step'), class:"black-link" %>
        </div>
      <% end %>
    </div>

    <div id="by-chapters-form" style="<%= @video.by_chapters? ? '' : 'display: none;' %>">
      <%= form_with url: music_post_path, method: :post, multipart: true, html: {data: {turbo: false}} do |f| %>
        <div class="music-frame">
          <div class="video-musics mb-minus-125 pb-40">
            <% @video.video_chapters.each do |video_chapter| %>
              <div class="video-music pb-240i">
                <div class="video-music-thumb-wrapper">
                  <% if video_chapter.chapter_type.image.attached? %>
                    <%= image_tag video_chapter.chapter_type.image, class: "h-[200px] w-100i object-cover rounded" %>
                  <% else %>
                    <p><%= t('videos.music.no_image') %></p>
                  <% end %>
                  <div class="video-music-thumb-wrapper-text flex flex-row justify-start items-center">
                    <div><%= "#{video_chapter.chapter_type.name} : " %></div>
                    <div class="ml-2"><%= video_chapter.text %></div>
                    <%= image_tag "icons/music_edit.png", alt: "Edit Icon", class: "edit-music-video-icon ml" %>
                  </div>
                </div>
                <%if video_chapter.custom_music.attached? && video_chapter.waveform.present?%>
                  <div class="relative audio-visualizer custom-audio-player" data-controller="audio-visualizer" data-audio-src="<%= url_for(video_chapter.custom_music) %>" data-waveform="<%= video_chapter.waveform.to_json %>">
                    <div class="play-icon play-button" data-audio-visualizer-target="playPauseButton">
                      <div class="play-button-icon"></div>
                    </div>
                    <canvas class="waveform-canvas" data-audio-visualizer-target="waveformCanvas"></canvas>
                      <div class="delete-music-icon-btn"
                          data-url="<%= drop_custom_music_path(video_chapter, video_id: @video.id) %>">
                        <%= image_tag "icons/delete-icon.png", alt: "Delete Icon", class: "purge-music-icon" %>
                      </div>
                  </div>
                <%end%>
                <div class="w-100i text-center h-170i upload-music-block flex flex-col justify-center items-center">
                  <label for="custom_music_<%= video_chapter.id %>" class="cursor-pointer flex flex-col justify-center items-center w-full">
                    <span><%= t('videos.music.add_music_track') %></span>
                    <div class="add-more-circle mt-6">
                      <span class="plus-sign">+</span>
                    </div>
                  </label>
                  <input type="file"
                        id="custom_music_<%= video_chapter.id %>"
                        name="custom_music_<%= video_chapter.id %>"
                        class="hidden custom-music-file-input"
                        accept="audio/mpeg">
                </div>

              <div class="w-full flex justify-center items-center p-text-center-bold-16"><%= t('or') %></div>
                <div class="w-full">
                  <% selected_music_id = video_chapter.video_music&.music_id %>
                  <div class="custom-music-dropdown flex justify-between items-center" data-selected-music="<%= selected_music_id %>">
                    <div class="dropdown-toggle w-100i">
                      <%if selected_music_id.present?%>
                        <span><%=video_chapter.video_music&.music&.name%></span>
                      <%else%>
                        <span><%= t('videos.music.choose_from_list') %></span>
                      <%end%>
                      <div class="dropdown-arrow">&#9662;</div>
                    </div>
                    <div class="dropdown-menu visible mt-2">
                      <% @musics.each do |music| %>
                        <label class="dropdown-option flex justify-center items-center" data-music-id="<%= music[:id] %>">
                          <div class="flex flex-col">
                            <span class="p-text-16"><%= music[:name] %></span>
                            <div class="flex flex-row justify-start items-center">
                              <input type="radio" class="mr-6" name="music_<%= video_chapter.id %>" value="<%= music[:id] %>" <%= selected_music_id == music[:id] ? 'checked' : '' %> />
                              <div class="flex flex-col w-full">
                                <div class="audio-visualizer custom-audio-player" data-controller="audio-visualizer" data-audio-src="<%= music[:url] %>" data-waveform="<%= music[:waveform] %>">
                                  <div class="play-icon play-button" data-audio-visualizer-target="playPauseButton">
                                    <div class="play-button-icon"></div>
                                  </div>
                                  <canvas class="waveform-canvas" data-audio-visualizer-target="waveformCanvas"></canvas>
                                </div>
                              </div>
                            </div>
                          </div>
                        </label>
                      <% end %>
                    </div>
                  </div>
                  <%= f.hidden_field "music_#{video_chapter.id}", value: selected_music_id, class: "selected-music-id" %>
                </div>
              </div>
            <% end %>
          </div>
        </div>

        <div class="video-steps">
          <%= render "videos/shared/back_button" %>
          <%= f.submit t('next_step'), class: "black-link" %>
        </div>
      <% end %>
    </div>
  </div>
</div>
<script>
document.addEventListener("turbo:load", () => {
  let currentAudioPlayer = null; // Track the currently playing audio player
  const radioButtons = document.querySelectorAll('input[name="video[music_type]"]');
  const wholeVideoForm = document.getElementById('whole-video-form');
  const byChaptersForm = document.getElementById('by-chapters-form');

  radioButtons.forEach(radio => {
    radio.addEventListener('change', () => {
      // Show or hide forms based on selected radio button
      if (radio.value === 'whole_video') {
        wholeVideoForm.style.display = 'block';
        byChaptersForm.style.display = 'none';
      } else {
        wholeVideoForm.style.display = 'none';
        byChaptersForm.style.display = 'block';
      }
    });
  });

  // Trigger the change event for the currently selected radio button
  const checkedRadio = document.querySelector('input[name="video[music_type]"]:checked');
  if (checkedRadio) {
    checkedRadio.dispatchEvent(new Event('change'));
  }

  document.querySelectorAll(".custom-music-dropdown").forEach((dropdown) => {
    const toggle = dropdown.querySelector(".dropdown-toggle");
    const menu = dropdown.querySelector(".dropdown-menu");
    const hiddenInput = dropdown.nextElementSibling; // Hidden input for the selected music ID

    // Toggle dropdown menu visibility
    // toggle.addEventListener("click", () => {
    //   menu.classList.toggle("visible");
    // });

    // Handle selection of a music option
    menu.querySelectorAll(".dropdown-option input[type='radio']").forEach((radioButton) => {
      const option = radioButton.closest(".dropdown-option");
      const audioSrc = option.querySelector(".custom-audio-player").dataset.audioSrc;

      // Create an audio element dynamically for playback
      let audio = new Audio(audioSrc);

      option.querySelector(".play-button").addEventListener("click", () => {
        // Initialize and resume AudioContext when a user interacts

        // Stop the currently playing audio player, if any
        if (currentAudioPlayer && currentAudioPlayer !== audio) {
          currentAudioPlayer.pause();
          currentAudioPlayer.currentTime = 0; // Reset to the beginning
        }

        // Play the new audio or toggle pause/play for the current one
        if (audio.paused) {
          audio.play();
          currentAudioPlayer = audio; // Update the current audio player
        } else {
          audio.pause();
        }
      });

      radioButton.addEventListener("change", () => {
        const musicId = option.dataset.musicId;

        // Update hidden input value
        hiddenInput.value = musicId;

        // Update toggle text
        const musicName = option.querySelector("span").innerText;
        toggle.querySelector("span").innerText = musicName;

        // Close dropdown
        // menu.classList.remove("visible");
      });
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener("click", (event) => {
    document.querySelectorAll(".dropdown-menu.visible").forEach((menu) => {
      if (!menu.parentElement.contains(event.target)) {
        // menu.classList.remove("visible");
      }
    });
  });

  // Stop audio when clicking outside
  document.addEventListener("click", (event) => {
    if (!event.target.closest('.dropdown-menu')) {
      if (currentAudioPlayer) {
        currentAudioPlayer.pause();
        currentAudioPlayer.currentTime = 0; // Reset the current audio
        currentAudioPlayer = null;
      }
    }
  });

  document.addEventListener("click", (event) => {
    const deleteMusicButton = event.target.closest(".delete-music-icon-btn");
    if (deleteMusicButton) {
      const parentBlock = deleteMusicButton.closest(".audio-visualizer");
      const url = deleteMusicButton.dataset.url;

      handleMusicDeletion(url, parentBlock);
    }
  });

  const handleMusicDeletion = async (url, parentBlock) => {
    try {
      if (url) {
        // Handle deletion for existing music files (server-side)
        const response = await fetch(url, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          console.error(`HTTP error! status: ${response.status}`);
          throw new Error("Server-side deletion failed.");
        }

        const data = await response.json();
        if (data.message) {
          resetMusicBlock(parentBlock);
        } else {
          console.warn("Server did not confirm deletion.");
        }
      } else {
        // Handle deletion for newly added music files
        resetMusicBlock(parentBlock);
      }
    } catch (error) {
      console.error("Error during music deletion:", error);
    } finally {
      // Optional: Reload the page to ensure state is consistent
      location.reload();
    }
  };

  const resetMusicBlock = (parentBlock) => {
    // Remove the block visually
    if (parentBlock) {
      parentBlock.remove();
    }
  };

});
</script>
<style>
.delete-music-icon-btn{
  position: absolute;
  width: 40px;
  height: 40px;
  top: 0;
  right: 0;
}
.purge-music-icon{
  position: absolute !important;
  top: 10px !important;
  right: 10px !important;
  width: 40px !important;
  height: 40px !important;
  z-index: 2 !important;
  display: block !important;
}
.audio-visualizer {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px 20px;
  border-radius: 30px; /* Rounded container */
  background: rgba(242, 252, 255, 1); /* Light blue */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.waveform-canvas {
  width: 100%;
  height: 32px;
  overflow: hidden;
}
.custom-music-dropdown {
  position: relative;
  width: 100%;
  height: 57px;
  padding: 16px 40px 16px 20px;
  border-radius: 8px;
  background: var(--Blue, rgba(242, 252, 255, 1));
  appearance: none;
  -webkit-appearance: none;
  font-family: 'Red Hat Display', sans-serif;
  font-size: 16px;
  font-weight: 400;
  line-height: 25px;
  text-align: left;
  background-clip: padding-box;
  z-index: 1;
}

.custom-music-dropdown::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 8px;
  padding: 1px; /* Border thickness */
  background: linear-gradient(
    205.68deg,
    rgba(201, 225, 255, 0.2) 19.49%,
    rgba(13, 103, 131, 0.2) 60.63%,
    rgba(22, 63, 80, 0.2) 90.92%
  );
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  z-index: -1; /* Place below the dropdown content */
}
.music-dropdown-radio{
  margin-top: 20px;
}
.dropdown-toggle {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  font-size: 16px;
  border-radius: 8px;
}

.dropdown-arrow {
  margin-left: 10px;
}

.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  max-height: 215px;
  overflow-y: auto;
  z-index: 1000;
  display: none;
}

.dropdown-menu.visible {
  display: block;
}

.dropdown-option {
  display: flex;
  align-items: center;
  padding: 10px 25px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
}

.dropdown-option:last-child {
  border-bottom: none;
}

.dropdown-option:hover {
  background: rgba(201, 225, 255, 0.5);
}
.edit-music-video-icon{
  width: 24px !important;
  height: 24px  !important;
  border: none !important;
  margin-left: 15px !important;
}
</style>