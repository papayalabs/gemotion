<div>
  <h1 class="video-h1">
    <%= t('videos.content.fill_chapters') %>
  </h1>
  <div class="w-full flex flex-col justify-center items-center">
    <div class="text-with-image-block flex justify-center items-center mb-[72px] w-full p-text-16">
      <%= t('videos.content.drag_instructions') %>
      <%= image_tag 'icons/file.png', class: 'image-from-image-text-block' %>
    </div>
  </div>
  <div class="w-full flex justify-center items-center">
    <div class="w-1360 flex flex-col justify-start items-start">
      <div class="p-text-16"><%= t('videos.content.your_media') %></div>
      <%= link_to step_back_path, class: "inviter-des-amis p-text-center-bold-16 flex flex-row items-center mt-4", data: { turbo: false } do %>
        <%= image_tag "icons/inviter.png", alt: "Icon", class: "icon-class" %>
        <%= t('videos.content.invite_friends') %>
      <% end %>
    </div>
  </div>

  <div class="mt-6">
    <div>
      <%= form_with url: content_post_path, method: :post, html: {data: {turbo: false}} do |f| %>
        <div class="content-frame">
          <div class="video-musics mb-minus-125 pb-40">
            <% @video.video_chapters.sort_by(&:order).each do |video_chapter| %>
              <div class="video-music">
                <div class="video-music-thumb-wrapper">
                  <% if video_chapter.chapter_type.image.attached? %>
                    <%= image_tag video_chapter.chapter_type.image, class: "h-[200px] w-100i object-cover rounded" %>
                  <% else %>
                    <p><%= t('videos.content.no_image') %></p>
                  <% end %>
                  <div class="video-music-thumb-wrapper-text flex flex-row justify-start items-center">
                    <div class="ml-2"><%= video_chapter.text %></div>
                  </div>
                </div>

                <div id="video-gallery-<%= video_chapter.id %>" class="gallery flex flex-row justify-start items-center">
                  <% video_chapter.ordered_videos.each_with_index do |video, index| %>
                    <div class="edit-video-container old-video-container" data-file-name="<%= video.filename.to_s %>">
                      <%= video_tag video, controls: true, autobuffer: true %>
                    </div>
                  <% end %>
                </div>

                <div class="edit-video-alert w-full mt-8">
                  <%= image_tag "icons/alert.svg" %>
                  <p class="p-text-16"><%= t('videos.content.drag_to_change') %></p>
                </div>

                <div class="w-100i text-center upload-music-block flex flex-col justify-center items-center">
                  <label for="custom_music_<%= video_chapter.id %>" class="cursor-pointer flex flex-col justify-center items-center w-full" id="video-upload-<%= video_chapter.id %>">
                    <span><%= t('videos.content.add_videos_limit') %></span>
                    <div class="add-more-circle mt-6">
                      <span class="plus-sign">+</span>
                    </div>
                  </label>
                  <%= f.file_field "#{video_chapter.id}[videos]", multiple: true, class: "hidden",
                                  id: "videoElem-#{video_chapter.id}", accept: "video/*" %>
                </div>

                <div id="photo-gallery-<%= video_chapter.id %>" class="gallery flex flex-row justify-start items-center">
                  <% video_chapter.ordered_photos.each_with_index do |photo, index| %>
                    <div class="edit-image-container old-image-container"  data-file-name="<%= photo.filename.to_s %>">
                        <%= image_tag photo, class: "preview-image prev-image" %>
                    </div>
                  <% end %>
                </div>

                <div class="edit-video-alert w-full mt-8">
                  <%= image_tag "icons/alert.svg" %>
                  <p class="p-text-16"><%= t('videos.content.drag_to_change') %></p>
                </div>

                <div class="w-100i text-center upload-music-block flex flex-col justify-center items-center">
                  <label for="custom_music_<%= video_chapter.id %>" class="cursor-pointer flex flex-col justify-center items-center w-full" id="photo-upload-<%= video_chapter.id %>">
                    <span><%= t('videos.content.add_photos_limit') %></span>
                    <div class="add-more-circle mt-6">
                      <span class="plus-sign">+</span>
                    </div>
                  </label>
                  <%= f.file_field "#{video_chapter.id}[photos]", multiple: true, class: "hidden",
                                  id: "photoElem-#{video_chapter.id}", accept: "image/*" %>
                </div>

                <%= f.hidden_field "#{video_chapter.id}[images_order]", id: "images_order_#{video_chapter.id}" %>
                <%= f.hidden_field "#{video_chapter.id}[videos_order]", id: "videos_order_#{video_chapter.id}" %>
              </div>
            <% end %>
          </div>
        </div>

        <div class="video-steps w-full">
          <%= render "videos/shared/back_button" %>
          <%= f.submit t('next_step'), class: "black-link" %>
        </div>
      <% end %>
    </div>
  </div>
</div>




<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const videoChapters = <%= raw @video_chapters.map(&:id).to_json %>;

  videoChapters.forEach(id => {
    const videoInput = document.getElementById(`videoElem-${id}`);
    const photoInput = document.getElementById(`photoElem-${id}`);

    const imagesOrderInput = document.getElementById(`images_order_${id}`);
    const videosOrderInput = document.getElementById(`videos_order_${id}`);

    const videoUploadBtn = document.getElementById(`video-upload-${id}`);
    const photoUploadBtn = document.getElementById(`photo-upload-${id}`);

    const videoGallery = document.getElementById(`video-gallery-${id}`);
    const photoGallery = document.getElementById(`photo-gallery-${id}`);



    let videoDataTransfer = new DataTransfer();
    let photoDataTransfer = new DataTransfer();

    videoUploadBtn.addEventListener("click", () => videoInput.click());
    photoUploadBtn.addEventListener("click", () => photoInput.click());

    // Initialize Sortable for videos and photos
    new Sortable(videoGallery, {
      animation: 150,
      onEnd: () => updateOrder(videoGallery, videosOrderInput),
    });

    new Sortable(photoGallery, {
      animation: 150,
      onEnd: () => updateOrder(photoGallery, imagesOrderInput),
    });

    videoInput.addEventListener("change", () => handleFiles(videoInput, videoGallery, videoDataTransfer, 'video'));
    photoInput.addEventListener("change", () => handleFiles(photoInput, photoGallery, photoDataTransfer, 'photo'));

    function handleFiles(input, gallery, dataTransfer, type) {
      [...input.files].forEach(file => {
          const sanitizedFilename = file.name.replace(/,/g, ""); // Sanitize filename

          if (dataTransfer.items.length >= 2) {
              alert(`You can only upload a maximum of 2 ${type}s.`);
              return;
          }

          // Create a new File object with the sanitized filename
          const sanitizedFile = new File([file], sanitizedFilename, { type: file.type });

          dataTransfer.items.add(sanitizedFile); // Add sanitized file to DataTransfer

          // Your existing logic to handle videos or photos
          if (type === 'video') {
              const videos = gallery.getElementsByClassName("old-video-container");
              while (videos.length > 0) {
                  videos[0].parentNode.removeChild(videos[0]);
              }
              addVideoToGallery(sanitizedFile, gallery); // Use sanitizedFile here
          } else {
              const images = gallery.getElementsByClassName("old-image-container");
              while (images.length > 0) {
                  images[0].parentNode.removeChild(images[0]);
              }
              addPhotoToGallery(sanitizedFile, gallery); // Use sanitizedFile here
          }
      });

      input.files = dataTransfer.files; // Sync sanitized files with input
    }

    function addVideoToGallery(file, gallery) {
      const reader = new FileReader();
      reader.onload = e => {
        const videoContainer = document.createElement("div");
        videoContainer.classList.add("edit-video-container");

        const video = document.createElement("video");
        video.src = e.target.result;
        video.controls = true;

        // Store the file name as a data attribute
        videoContainer.setAttribute('data-file-name', file.name);

        const removeBtn = document.createElement("button");
        removeBtn.textContent = "Remove";
        removeBtn.addEventListener("click", () => {
          videoContainer.remove();
          videoDataTransfer.items.remove([...videoDataTransfer.files].indexOf(file));
          videoInput.files = videoDataTransfer.files;
          updateOrder(videoGallery, videosOrderInput);
        });

        videoContainer.appendChild(video);
        videoContainer.appendChild(removeBtn);
        gallery.appendChild(videoContainer);

        updateOrder(videoGallery, videosOrderInput);
      };
      reader.readAsDataURL(file);
    }

    function addPhotoToGallery(file, gallery) {
      const reader = new FileReader();
      reader.onload = e => {
        const imgContainer = document.createElement("div");
        imgContainer.classList.add("edit-image-container");

        const img = document.createElement("img");
        img.src = e.target.result;
        img.classList.add("preview-image");

        // Store the file name as a data attribute
        imgContainer.setAttribute('data-file-name', file.name);

        const removeBtn = document.createElement("button");
        removeBtn.textContent = "Remove";
        removeBtn.addEventListener("click", () => {
          imgContainer.remove();
          photoDataTransfer.items.remove([...photoDataTransfer.files].indexOf(file));
          photoInput.files = photoDataTransfer.files;
          updateOrder(photoGallery, imagesOrderInput);
        });

        imgContainer.appendChild(img);
        imgContainer.appendChild(removeBtn);
        gallery.appendChild(imgContainer);

        updateOrder(photoGallery, imagesOrderInput);
      };
      reader.readAsDataURL(file);
    }

    function updateOrder(gallery, input) {
      const order = [...gallery.children].map(item => {
        return item.getAttribute('data-file-name');
      });
      input.value = order.join(',');
      console.log(input.value);
    }

    function createRemoveButton(container, input, dataTransfer, gallery, orderInput) {
      const removeBtn = document.createElement("button");
      removeBtn.textContent = "Remove";
      removeBtn.addEventListener("click", () => {
        container.remove();
        dataTransfer.items.remove([...dataTransfer.files].indexOf(file));
        input.files = dataTransfer.files;
        updateOrder(gallery, orderInput);
      });
      return removeBtn;
    }
  });
});
</script>
